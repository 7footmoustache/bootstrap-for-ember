this.Ember=this.Ember||{},this.Ember.TEMPLATES=this.Ember.TEMPLATES||{},this.Ember.TEMPLATES.ads=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{},e.buffer.push("<h1>Bootstrap for Ember</h1>")}),this.Ember.TEMPLATES.application=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h,i,j="",k=c.helperMissing,l=this.escapeExpression;return e.buffer.push('<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <!-- Meta, title, CSS, favicons, etc. -->\n    '),g={},h={},i={hash:{},contexts:[b],types:["STRING"],hashContexts:h,hashTypes:g,data:e},e.buffer.push(l((f=c.partial||b.partial,f?f.call(b,"header",i):k.call(b,"partial","header",i)))),e.buffer.push('\n    <!-- Place anything custom after this. -->\n  </head>\n  <body>\n    <a class="sr-only" href="#content">Skip navigation</a>\n\n    <!-- Docs master nav -->\n    '),g={},h={},i={hash:{},contexts:[b],types:["STRING"],hashContexts:h,hashTypes:g,data:e},e.buffer.push(l((f=c.partial||b.partial,f?f.call(b,"nav-main",i):k.call(b,"partial","nav-main",i)))),e.buffer.push("\n    "),h={style:b},g={style:"STRING"},i={hash:{style:"z-index: 1000; position: fixed; width: 50%; left: 0; right: 0; margin-left: auto; margin-right: auto; margin-top: 50px;"},contexts:[],types:[],hashContexts:h,hashTypes:g,data:e},e.buffer.push(l((f=c["bs-notifications"]||b["bs-notifications"],f?f.call(b,i):k.call(b,"bs-notifications",i)))),e.buffer.push('\n\n    <!-- Docs page layout -->\n    <div class="bs-header" id="content">\n      <div class="container">\n        <p>'),g={},h={},e.buffer.push(l(c._triageMustache.call(b,"page.lead",{hash:{},contexts:[b],types:["ID"],hashContexts:h,hashTypes:g,data:e}))),e.buffer.push("</p>\n        "),g={},h={},i={hash:{},contexts:[b],types:["STRING"],hashContexts:h,hashTypes:g,data:e},e.buffer.push(l((f=c.partial||b.partial,f?f.call(b,"ads",i):k.call(b,"partial","ads",i)))),e.buffer.push('\n      </div>\n    </div>\n\n    <div class="container bs-docs-container">\n      <div class="row">\n        <div class="col-md-3">\n          <div class="bs-sidebar hidden-print" role="complementary">\n              <ul class="nav bs-sidenav">\n                '),g={},h={},i={hash:{},contexts:[b],types:["ID"],hashContexts:h,hashTypes:g,data:e},e.buffer.push(l((f=c.partial||b.partial,f?f.call(b,"leftnav",i):k.call(b,"partial","leftnav",i)))),e.buffer.push('\n            </ul>\n          </div>\n        </div>\n        <div class="col-md-9" role="main">\n          '),g={},h={},e.buffer.push(l(c._triageMustache.call(b,"outlet",{hash:{},contexts:[b],types:["ID"],hashContexts:h,hashTypes:g,data:e}))),e.buffer.push('\n        </div>\n      </div>\n\n    </div>\n\n    <!-- Footer\n    ================================================== -->\n    <footer class="bs-footer" role="contentinfo">\n      <div class="container">\n        '),g={},h={},i={hash:{},contexts:[b],types:["ID"],hashContexts:h,hashTypes:g,data:e},e.buffer.push(l((f=c.partial||b.partial,f?f.call(b,"social-buttons",i):k.call(b,"partial","social-buttons",i)))),e.buffer.push("\n      </div>\n    </footer>\n\n    <!-- JS and analytics only. -->\n    "),g={},h={},i={hash:{},contexts:[b],types:["ID"],hashContexts:h,hashTypes:g,data:e},e.buffer.push(l((f=c.partial||b.partial,f?f.call(b,"footer",i):k.call(b,"partial","footer",i)))),e.buffer.push("\n  </body>\n</html>\n"),j}),this.Ember.TEMPLATES.footer=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f="";return f}),this.Ember.TEMPLATES.header=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f="";return f}),this.Ember.TEMPLATES.index=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{},e.buffer.push('<div class="bs-docs-section">\n  <div class="page-header">\n    <h1 id="js-overview">Showcase</h1>\n\n    <h3 id="js-individual-compiled">Project Created!</h3>\n    <p>Please choose components from the left pane.</p>\n  </div>')}),this.Ember.TEMPLATES.leftnav=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d,e,f,h="";return b.buffer.push("\n    <li>\n        <a "),e={},f={},b.buffer.push(l(c.action.call(a,"select","item",{hash:{},contexts:[a,a],types:["STRING","ID"],hashContexts:f,hashTypes:e,data:b}))),b.buffer.push(' style="cursor: pointer">\n            '),e={},f={},b.buffer.push(l(c._triageMustache.call(a,"item.title",{hash:{},contexts:[a],types:["ID"],hashContexts:f,hashTypes:e,data:b}))),b.buffer.push("\n            "),e={},f={},d=c["if"].call(a,"item.special",{hash:{},inverse:m.noop,fn:m.program(2,g,b),contexts:[a],types:["ID"],hashContexts:f,hashTypes:e,data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push("\n        </a>\n    </li>\n"),h}function g(a,b){var d,e,f,g,h="";return b.buffer.push("\n                "),e={content:a,type:a},f={content:"STRING",type:"STRING"},g={hash:{content:"Special",type:"danger"},contexts:[],types:[],hashContexts:e,hashTypes:f,data:b},b.buffer.push(l((d=c["bs-label"]||a["bs-label"],d?d.call(a,g):k.call(a,"bs-label",g)))),b.buffer.push("\n            "),h}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var h,i,j,k=c.helperMissing,l=this.escapeExpression,m=this;i={},j={},h=c.each.call(b,"item","in","controller",{hash:{},inverse:m.noop,fn:m.program(1,f,e),contexts:[b,b,b],types:["ID","ID","ID"],hashContexts:j,hashTypes:i,data:e}),h||0===h?e.buffer.push(h):e.buffer.push("")}),this.Ember.TEMPLATES["nav-main"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){b.buffer.push("Bootstrap for Ember")}function g(a,b){b.buffer.push("Home")}function h(a,b){b.buffer.push("Components")}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var i,j,k,l,m,n="",o=this,p=c.helperMissing;return e.buffer.push('<header class="navbar navbar-inverse navbar-fixed-top bs-docs-nav" role="banner">\n  <div class="container">\n    <div class="navbar-header">\n      <button class="navbar-toggle" type="button" data-toggle="collapse" data-target=".bs-navbar-collapse">\n        <span class="sr-only">Toggle navigation</span>\n        <span class="icon-bar"></span>\n        <span class="icon-bar"></span>\n        <span class="icon-bar"></span>\n      </button>\n      '),k={"class":b},l={"class":"STRING"},m={hash:{"class":"navbar-brand"},inverse:o.noop,fn:o.program(1,f,e),contexts:[b],types:["STRING"],hashContexts:k,hashTypes:l,data:e},i=c.linkTo||b.linkTo,j=i?i.call(b,"index",m):p.call(b,"linkTo","index",m),(j||0===j)&&e.buffer.push(j),e.buffer.push('\n    </div>\n    <nav class="collapse navbar-collapse bs-navbar-collapse" role="navigation">\n      <ul class="nav navbar-nav">\n        <li>\n            '),l={},k={},m={hash:{},inverse:o.noop,fn:o.program(3,g,e),contexts:[b],types:["STRING"],hashContexts:k,hashTypes:l,data:e},i=c.linkTo||b.linkTo,j=i?i.call(b,"index",m):p.call(b,"linkTo","index",m),(j||0===j)&&e.buffer.push(j),e.buffer.push("\n        </li>\n\n        <li>\n            "),l={},k={},m={hash:{},inverse:o.noop,fn:o.program(5,h,e),contexts:[b],types:["STRING"],hashContexts:k,hashTypes:l,data:e},i=c.linkTo||b.linkTo,j=i?i.call(b,"show_components",m):p.call(b,"linkTo","show_components",m),(j||0===j)&&e.buffer.push(j),e.buffer.push("\n        </li>\n      </ul>\n    </nav>\n  </div>\n</header>\n"),n}),this.Ember.TEMPLATES["show_components/alert"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d,e,f="";return b.buffer.push('\n    <h4 class="alert-heading">Oh snap! You got an error!</h4>\n    <p>Alert can also be used in a <strong>block form</strong>.</p>\n    <p>\n        <button class="btn btn-danger" '),d={},e={},b.buffer.push(m(c.action.call(a,"submit",{hash:{},contexts:[a],types:["STRING"],hashContexts:e,hashTypes:d,data:b}))),b.buffer.push('>Take this action</button> <a class="btn btn-default">Or do this</a>\n    </p>\n    '),f}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var g,h,i,j,k,l="",m=this.escapeExpression,n=c.helperMissing,o=this;return e.buffer.push('<h1>Alert</h1>\n<h2>Usage Examples</h2>\n<div class="bs-example">\n    '),i={message:b,type:b},j={message:"STRING",type:"STRING"},k={hash:{message:"A warning alert with simple message.",type:"warning"},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(m((g=c["bs-alert"]||b["bs-alert"],g?g.call(b,k):n.call(b,"bs-alert",k)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-alert message="A warning alert with simple message." type="warning"&#125;&#125;</code></pre>\n<div class="bs-example">\n    '),i={message:b,type:b,dismiss:b},j={message:"STRING",type:"STRING",dismiss:"BOOLEAN"},k={hash:{message:"With close button",type:"warning",dismiss:!0},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(m((g=c["bs-alert"]||b["bs-alert"],g?g.call(b,k):n.call(b,"bs-alert",k)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-alert message="With close button" type="warning" dismiss=true&#125;&#125;</code></pre>\n<div class="bs-example">\n    '),i={message:b,type:b,dismiss:b,fade:b},j={message:"STRING",type:"STRING",dismiss:"BOOLEAN",fade:"BOOLEAN"},k={hash:{message:"Close button will fade",type:"warning",dismiss:!0,fade:!0},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(m((g=c["bs-alert"]||b["bs-alert"],g?g.call(b,k):n.call(b,"bs-alert",k)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-alert message="Close button will fade" type="warning" dismiss=true fade=true&#125;&#125;</code></pre>\n<div class="bs-example">\n    '),i={message:b,type:b,fade:b,dismissAfter:b},j={message:"STRING",type:"STRING",fade:"BOOLEAN",dismissAfter:"INTEGER"},k={hash:{message:"Dismissed after 5 seconds!!",type:"info",fade:!0,dismissAfter:5},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(m((g=c["bs-alert"]||b["bs-alert"],g?g.call(b,k):n.call(b,"bs-alert",k)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-alert message="Dismissed after 5 seconds" type="info" dismissAfter=5&#125;&#125;</code></pre>\n<div class="bs-example">\n    '),i={message:b,type:b},j={message:"STRING",type:"STRING"},k={hash:{message:"Other types such as Sucess",type:"success"},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(m((g=c["bs-alert"]||b["bs-alert"],g?g.call(b,k):n.call(b,"bs-alert",k)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-alert message="Other types such as Sucess" type="success"&#125;&#125;</code></pre>\n<div class="bs-example">\n    '),i={type:b},j={type:"STRING"},k={hash:{type:"danger"},inverse:o.noop,fn:o.program(1,f,e),contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},g=c["bs-alert"]||b["bs-alert"],h=g?g.call(b,k):n.call(b,"bs-alert",k),(h||0===h)&&e.buffer.push(h),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-alert type="danger"&#125;&#125;\n&lt;h4 class="alert-heading"&gt;Oh snap! You got an error!&lt;/h4&gt;\n&lt;p&gt;Alert can also be used in a &lt;strong&gt;block form&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;\n&lt;button class="btn btn-danger" &#123;&#123;action "submit"&#125;&#125;&gt;Take this action&lt;/button&gt; &lt;a class="btn btn-default"&gt;Or do this&lt;/a&gt;\n&lt;/p&gt;\n&#123;&#123;/bs-alert&#125;&#125;</code></pre>\n<div class="bs-example">\n    '),i={message:b,type:b,dismiss:b,closed:b,close:b},j={message:"STRING",type:"STRING",dismiss:"BOOLEAN",closed:"STRING",close:"STRING"},k={hash:{message:"Close will trigger a function in controller",type:"warning",dismiss:!0,closed:"didAlertClosed",close:"didAlertClose"},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(m((g=c["bs-alert"]||b["bs-alert"],g?g.call(b,k):n.call(b,"bs-alert",k)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-alert message="Close will trigger a function in controller" type="warning" dismiss=true closed="didAlertClosed" close="didAlertClose"&#125;&#125;</code></pre>\n<h2>Component Properties</h2>\n<p><div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>message</td>\n                <td>The string to display in the alert.</td>\n            </tr>\n            <tr>\n                <td>type</td>\n                <td>Alert types: success | info | warning | danger</td>\n            </tr>\n            <tr>\n                <td>dismiss</td>\n                <td>if true an <code>X</code> link is set to dismiss the alert.</td>\n            </tr>\n            <tr>\n                <td>dismissAfter</td>\n                <td>If set the alert will be automatically dismissed after the specified amount of <code>seconds</code></td>\n            </tr>\n            <tr>\n                <td>fade</td>\n                <td>If true, the dialog will be faded out when closed.</td>\n            </tr>\n            <tr>\n                <td>close</td>\n                <td>Triggers the specified function name on the <strong>controller</strong> immediately when the close instance method is called.</td>\n            </tr>\n            <tr>\n                <td>closed</td>\n                <td>Triggers the specified function name on the <strong>controller</strong> when the alert has been closed (will wait for CSS transitions to complete).</td>\n            </tr>\n        </tbody>\n    </table></p>\n'),l}),this.Ember.TEMPLATES["show_components/badge"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h,i,j="",k=c.helperMissing,l=this.escapeExpression;return e.buffer.push('<h1>Badge</h1>\n<div class="bs-example">\n    <a href="#"> Inbox '),g={content:b},h={content:"STRING"},i={hash:{content:"42"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-badge"]||b["bs-badge"],f?f.call(b,i):k.call(b,"bs-badge",i)))),e.buffer.push(' </a>\n</div>\n\n<pre><code class="lang-html">&lt;a href="#"&gt; Inbox&#123;&#123;bs-badge content="42"&#125;&#125; &lt;/a&gt;</code></pre>\n<h2>Built-in styles</h2>\n<p>Works well with built-in styles that are included for placing badges in active states in pill and list navigations.</p>\n<div class="bs-example">\n    <ul class="nav nav-pills">\n        <li class="active"><a href="#">Home '),g={content:b},h={content:"INTEGER"},i={hash:{content:42},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-badge"]||b["bs-badge"],f?f.call(b,i):k.call(b,"bs-badge",i)))),e.buffer.push('</a></li>\n        <li><a href="#">Profile</a></li>\n        <li><a href="#">Messages '),g={content:b},h={content:"INTEGER"},i={hash:{content:3},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-badge"]||b["bs-badge"],f?f.call(b,i):k.call(b,"bs-badge",i)))),e.buffer.push('</a></li>\n    </ul>\n    <br>\n    <ul class="nav nav-pills nav-stacked" style="max-width: 260px;">\n        <li class="active">\n            <a href="#">\n                '),g={"class":b,content:b},h={"class":"STRING",content:"INTEGER"},i={hash:{"class":"pull-right",content:42},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-badge"]||b["bs-badge"],f?f.call(b,i):k.call(b,"bs-badge",i)))),e.buffer.push('\n                Home\n            </a>\n        </li>\n        <li><a href="#">Profile</a></li>\n        <li>\n            <a href="#">\n                '),g={"class":b,content:b},h={"class":"STRING",content:"INTEGER"},i={hash:{"class":"pull-right",content:3},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-badge"]||b["bs-badge"],f?f.call(b,i):k.call(b,"bs-badge",i)))),e.buffer.push('\n                Messages\n            </a>\n        </li>\n    </ul>\n</div>\n\n<pre><code class="lang-html">&lt;ul class="nav nav-pills"&gt;\n    &lt;li class="active"&gt;&lt;a href="#"&gt;Home &#123;&#123;bs-badge content=42&#125;&#125;&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href="#"&gt;Profile&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href="#"&gt;Messages &#123;&#123;bs-badge content=3&#125;&#125;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;br&gt;\n&lt;ul class="nav nav-pills nav-stacked" style="max-width: 260px;"&gt;\n    &lt;li class="active"&gt;\n        &lt;a href="#"&gt;\n            &#123;&#123;bs-badge class="pull-right"content=42&#125;&#125;\n            Home\n        &lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li&gt;&lt;a href="#"&gt;Profile&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;\n        &lt;a href="#"&gt;\n            &#123;&#123;bs-badge class="pull-right"content=3&#125;&#125;\n            Messages\n        &lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n<h2>Component Properties</h2>\n<p><div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>content</td>\n                <td>string: The content of the badge.</td>\n            </tr>\n        </tbody>\n    </table></p>\n'),j}),this.Ember.TEMPLATES["show_components/button"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){b.buffer.push("Content")}function g(a,b){b.buffer.push("Primary")}function h(a,b){b.buffer.push("Link")}function i(a,b){b.buffer.push("Default Large button")}function j(a,b){b.buffer.push("Block Button")}function k(a,b){b.buffer.push("Disabled Button")}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var l,m,n,o,p,q="",r=this,s="function",t=c.blockHelperMissing,u=c.helperMissing,v=this.escapeExpression;return e.buffer.push('<h1>Button</h1>\n<h2>Types</h2>\n<div class="bs-example">\n    '),n={hash:{},inverse:r.noop,fn:r.program(1,f,e),contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},(l=c["bs-button"])?l=l.call(b,n):(l=b["bs-button"],l=typeof l===s?l.apply(b):l),o={},p={},c["bs-button"]||(l=t.call(b,l,n)),(l||0===l)&&e.buffer.push(l),e.buffer.push("\n    "),p={content:b},o={content:"STRING"},n={hash:{content:"Inline Text"},contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},e.buffer.push(v((l=c["bs-button"]||b["bs-button"],l?l.call(b,n):u.call(b,"bs-button",n)))),e.buffer.push("\n    "),p={type:b},o={type:"STRING"},n={hash:{type:"primary"},inverse:r.noop,fn:r.program(3,g,e),contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},l=c["bs-button"]||b["bs-button"],m=l?l.call(b,n):u.call(b,"bs-button",n),(m||0===m)&&e.buffer.push(m),e.buffer.push("\n    "),p={type:b},o={type:"STRING"},n={hash:{type:"link"},inverse:r.noop,fn:r.program(5,h,e),contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},l=c["bs-button"]||b["bs-button"],m=l?l.call(b,n):u.call(b,"bs-button",n),(m||0===m)&&e.buffer.push(m),e.buffer.push('\n\n    <p>All other types such as <strong>info</strong>, <strong>warning</strong>, <strong>danger</strong> are supported.</p>\n</div>\n\n\n<pre><code class="lang-html">&lt;!-- Standard gray default button with gradient --&gt;\n&#123;&#123;#bs-button&#125;&#125;Content&#123;&#123;/bs-button&#125;&#125;\n\n&lt;!--Inline text as button content--&gt;\n&#123;&#123;bs-button content="Inline Text"&#125;&#125;\n\n&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;\n&#123;&#123;#bs-button type="primary"&#125;&#125;Primary&#123;&#123;/bs-button&#125;&#125;\n\n&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;\n&#123;&#123;#bs-button type="link"&#125;&#125;Link&#123;&#123;/bs-button&#125;&#125;</code></pre>\n<h2>Sizes</h2>\n<p>In correspondence with bootstrap css class button sizes <code>.btn-lg</code>, <code>.btn-sm</code>, or <code>.btn-xs</code>, size can simply defined by the <em>size</em> property or use one of the size properties: <code>small=true</code>, <code>large=true</code>, <code>xs=true</code></p>\n<div class="bs-example">\n    <p>\n        '),p={type:b,size:b,content:b},o={type:"STRING",size:"STRING",content:"STRING"},n={hash:{type:"primary",size:"xs",content:"Primary Extra Small Button"},contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},e.buffer.push(v((l=c["bs-button"]||b["bs-button"],l?l.call(b,n):u.call(b,"bs-button",n)))),e.buffer.push("\n        "),p={type:b,small:b,content:b},o={type:"STRING",small:"BOOLEAN",content:"STRING"},n={hash:{type:"info",small:!0,content:"Info Small Button"},contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},e.buffer.push(v((l=c["bs-button"]||b["bs-button"],l?l.call(b,n):u.call(b,"bs-button",n)))),e.buffer.push("\n        "),p={type:b,content:b},o={type:"STRING",content:"STRING"},n={hash:{type:"danger",content:"Danger Default size button"},contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},e.buffer.push(v((l=c["bs-button"]||b["bs-button"],l?l.call(b,n):u.call(b,"bs-button",n)))),e.buffer.push("\n        "),p={size:b},o={size:"STRING"},n={hash:{size:"lg"},inverse:r.noop,fn:r.program(7,i,e),contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},l=c["bs-button"]||b["bs-button"],m=l?l.call(b,n):u.call(b,"bs-button",n),(m||0===m)&&e.buffer.push(m),e.buffer.push('\n    </p>\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-button type="primary" size="xs" content="Primary Extra Small Button"&#125;&#125;\n&#123;&#123;bs-button type="info" small=true content="Info Small Button"&#125;&#125;\n&#123;&#123;bs-button type="danger" content="Danger Default size button"&#125;&#125;\n&#123;&#123;#bs-button size="lg"&#125;&#125;Default Large button&#123;&#123;/bs-button&#125;&#125;</code></pre>\n<h2>Block Level</h2>\n<p>block level buttons—those that span the full width of a parent— by adding <code>block=true</code></p>\n<div class="bs-example">\n    '),p={type:b,xs:b,block:b},o={type:"STRING",xs:"BOOLEAN",block:"BOOLEAN"},n={hash:{type:"primary",xs:!0,block:!0},inverse:r.noop,fn:r.program(9,j,e),contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},l=c["bs-button"]||b["bs-button"],m=l?l.call(b,n):u.call(b,"bs-button",n),(m||0===m)&&e.buffer.push(m),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-button type="primary" xs=true block=true}}Block Button&#123;&#123;/bs-button&#125;&#125;</code></pre>\n<h2>Disbled state</h2>\n<p>As in Bootstrap, set <code>disabled="disabled"</code>/<code>disabled=true</code> to make the button unclickable.</p>\n<div class="bs-example">\n    '),p={type:b,disabled:b},o={type:"STRING",disabled:"BOOLEAN"},n={hash:{type:"primary",disabled:!0},inverse:r.noop,fn:r.program(11,k,e),contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},l=c["bs-button"]||b["bs-button"],m=l?l.call(b,n):u.call(b,"bs-button",n),(m||0===m)&&e.buffer.push(m),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-button type="primary" disabled=true&#125;&#125;Disabled Button&#123;&#123;/bs-button&#125;&#125;</code></pre>\n<p>Disabled state can also be hooked to a controller property</p>\n<div class="bs-example">\n    '),p={type:b,content:b,disabled:b,clicked:b},o={type:"STRING",content:"STRING",disabled:"ID",clicked:"STRING"},n={hash:{type:"primary",content:"Click to disable",disabled:"isButtonDisabled",clicked:"disableButton"},contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},e.buffer.push(v((l=c["bs-button"]||b["bs-button"],l?l.call(b,n):u.call(b,"bs-button",n)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-button type="primary" content="Click to disable" disabled=isButtonDisabled clicked="disableButton"&#125;&#125;</code></pre>\n<ul>\n<li><code>isButtonDisabled</code> is a boolean property on the controller</li>\n<li><code>disableButton</code> is a function on the controller that sets <code>isButtonDisabled</code> to <em>false</em></li>\n</ul>\n<h2>State</h2>\n<p>By Bootstrap:</p>\n<blockquote>\n<p>Add <code>data-loading-text="Loading..."</code> to use a loading state on a button.</p>\n</blockquote>\n<p>Then extra <code>loading=loadingState</code> is needed where <em>loadingState</em> is a property in the <em>controller</em> that returns a string which\ndefines the current state of the button:</p>\n<ul>\n<li>If <code>loadingState</code> property equals <code>loading</code> then the button will be disabled and its text will change to the value of the <code>data-loading-text</code> button property.</li>\n<li>If its value is <code>null</code> then the button will be re-enabled and its text will be modified to the original value defined in the <code>content</code> button property.</li>\n</ul>\n<div class="bs-example">\n    '),p={type:b,"data-loading-text":b,loading:b,clicked:b,content:b,clicked:b},o={type:"STRING","data-loading-text":"STRING",loading:"ID",clicked:"STRING",content:"STRING",clicked:"STRING"},n={hash:{type:"primary","data-loading-text":"Loading...",loading:"loadingState",clicked:"disableButton",content:"Submit",clicked:"startLoading"},contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},e.buffer.push(v((l=c["bs-button"]||b["bs-button"],l?l.call(b,n):u.call(b,"bs-button",n)))),e.buffer.push('\n</div>\n\n\n<pre><code class="lang-html">&#123;&#123;bs-button type="primary" data-loading-text="Loading..." loading=loadingState content="Submit" clicked="startLoading"&#125;&#125;</code></pre>\n<p>In controller:</p>\n\n<pre><code class="lang-javascript">startLoading: function() {\n    var _this = this;\n    this.set(&#39;loadingState&#39;, &#39;loading&#39;);\n    return Ember.run.later(function() {\n      return _this.set(&#39;loadingState&#39;, null);\n    }, 2000);\n}</code></pre>\n<p>The <code>loading</code> property may also return any string that matches one of the <code>data-foo-text</code> button property to render other text\nbut the original text of the button when the loading state completes.</p>\n<div class="bs-example">\n    '),p={type:b,"data-loading-text":b,"data-completed-text":b,loading:b,content:b,clicked:b},o={type:"STRING","data-loading-text":"STRING","data-completed-text":"STRING",loading:"ID",content:"STRING",clicked:"STRING"},n={hash:{type:"primary","data-loading-text":"Loading...","data-completed-text":"Completed!",loading:"loadingState1",content:"Submit!",clicked:"startLoading1"},contexts:[],types:[],hashContexts:p,hashTypes:o,data:e},e.buffer.push(v((l=c["bs-button"]||b["bs-button"],l?l.call(b,n):u.call(b,"bs-button",n)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-javascript">startLoading1: function() {\n    var _this = this;\n    this.set(&#39;loadingState&#39;, &#39;loading&#39;);\n    return Ember.run.later(function() {\n      return _this.set(&#39;loadingState&#39;, &#39;completed&#39;);\n    }, 2000);\n}</code></pre>\n<p>Pay attention that this time the <code>loadingState</code> is set to <code>completed</code> and not <code>null</code>.</p>\n<h2>Component Properties</h2>\n<p><div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>type</td>\n                <td>Alert types: <em>success</em> | <em>info</em> | <em>warning</em> | <em>danger</em></td>\n            </tr>\n            <tr>\n                <td>content</td>\n                <td>A string representing the text of the button (<em>not required if component is used as a block component</em>)</td>\n            </tr>\n            <tr>\n                <td>clicked</td>\n                <td>Triggers the specified function name on the <strong>controller</strong> immediately when the button is clicked.</td>\n            </tr>\n            <tr>\n                <td>size</td>\n                <td>Can be: <em>sx</em> | <em>sm</em> | <em>lg</em></td>\n            </tr>\n            <tr>\n                <td>xs</td>\n                <td>If set to <em>true</em> it is equivalent to <code>size=xs</code></td>\n            </tr>\n            <tr>\n                <td>small</td>\n                <td>If set to <em>true</em> it is equivalent to <code>size=small</code></td>\n            </tr>\n            <tr>\n                <td>large</td>\n                <td>If set to <em>true</em> it is equivalent to <code>size=large</code></td>\n            </tr>\n            <tr>\n                <td>block</td>\n                <td>If <em>true</em> the button is a block level and will span the full width of its parent</td>\n            </tr>\n            <tr>\n                <td>disabled</td>\n                <td>If <em>true</em> the button will be disabled, can also be bound to a <em>controller</em> property</td>\n            </tr>\n            <tr>\n                <td>loading</td>\n                <td>Bound to a controller property that defines the state of the button.</td>\n            </tr>\n            <tr>\n                <td>data-loading-text</td>\n                <td>If <code>loading=foo</code> and <code>foo</code> is a property in the <em>controller</em> and <code>foo</code> property returns <code>loading</code>, then the text of the button will be changed to the value of <em>this</em> property.</td>\n            </tr>\n            <tr>\n                <td>data-xxx-text</td>\n                <td>If <code>loading=foo</code> and <code>foo</code> is a property in the <em>controller</em> and <code>foo</code> property returns <code>xxx</code>, then the text of the button will be changed to the value of <em>this</em> property.</td>\n            </tr>\n        </tbody>\n    </table></p>\n'),q}),this.Ember.TEMPLATES["show_components/buttonGroup"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d,e,f,g,h="";return b.buffer.push("\n        "),e={contentBinding:a,selectedBinding:a},f={contentBinding:"STRING",selectedBinding:"STRING"},g={hash:{contentBinding:"options",selectedBinding:"selected"},contexts:[],types:[],hashContexts:e,hashTypes:f,data:b},b.buffer.push(r((d=c["bs-btn-group"]||a["bs-btn-group"],d?d.call(a,g):q.call(a,"bs-btn-group",g)))),b.buffer.push("\n        "),e={contentBinding:a,selectedBinding:a},f={contentBinding:"STRING",selectedBinding:"STRING"},g={hash:{contentBinding:"options2",selectedBinding:"selected"},contexts:[],types:[],hashContexts:e,hashTypes:f,data:b},b.buffer.push(r((d=c["bs-btn-group"]||a["bs-btn-group"],d?d.call(a,g):q.call(a,"bs-btn-group",g)))),b.buffer.push("\n    "),h}function g(a,b){var d,e,f,g,h="";return b.buffer.push("\n        "),e={size:a,contentBinding:a,selectedBinding:a},f={size:"STRING",contentBinding:"STRING",selectedBinding:"STRING"},g={hash:{size:"lg",contentBinding:"options",selectedBinding:"selected"},contexts:[],types:[],hashContexts:e,hashTypes:f,data:b},b.buffer.push(r((d=c["bs-btn-group"]||a["bs-btn-group"],d?d.call(a,g):q.call(a,"bs-btn-group",g)))),b.buffer.push("\n    "),h}function h(a,b){var d,e,f,g,h="";return b.buffer.push("\n        "),e={contentBinding:a,selectedBinding:a},f={contentBinding:"STRING",selectedBinding:"STRING"},g={hash:{contentBinding:"options",selectedBinding:"selected"},contexts:[],types:[],hashContexts:e,hashTypes:f,data:b},b.buffer.push(r((d=c["bs-btn-group"]||a["bs-btn-group"],d?d.call(a,g):q.call(a,"bs-btn-group",g)))),b.buffer.push("\n    "),h}function i(a,b){var d,e,f,g,h="";return b.buffer.push("\n        "),e={small:a,contentBinding:a,selectedBinding:a},f={small:"BOOLEAN",contentBinding:"STRING",selectedBinding:"STRING"},g={hash:{small:!0,contentBinding:"options",selectedBinding:"selected"},contexts:[],types:[],hashContexts:e,hashTypes:f,data:b},b.buffer.push(r((d=c["bs-btn-group"]||a["bs-btn-group"],d?d.call(a,g):q.call(a,"bs-btn-group",g)))),b.buffer.push("\n    "),h
}function j(a,b){var d,e,f,g,h="";return b.buffer.push("\n        "),e={size:a,contentBinding:a,selectedBinding:a},f={size:"STRING",contentBinding:"STRING",selectedBinding:"STRING"},g={hash:{size:"xs",contentBinding:"options",selectedBinding:"selected"},contexts:[],types:[],hashContexts:e,hashTypes:f,data:b},b.buffer.push(r((d=c["bs-btn-group"]||a["bs-btn-group"],d?d.call(a,g):q.call(a,"bs-btn-group",g)))),b.buffer.push("\n    "),h}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var k,l,m,n,o,p="",q=c.helperMissing,r=this.escapeExpression,s=this,t="function",u=c.blockHelperMissing;return e.buffer.push('<h1>Button Group</h1>\n<p>To wrap a series of buttons, use the <em>bs-btn-group</em> component.</p>\n<h2>Standard</h2>\n<div class="bs-example">\n    '),m={contentBinding:b,selectedBinding:b},n={contentBinding:"STRING",selectedBinding:"STRING"},o={hash:{contentBinding:"options",selectedBinding:"selected"},contexts:[],types:[],hashContexts:m,hashTypes:n,data:e},e.buffer.push(r((k=c["bs-btn-group"]||b["bs-btn-group"],k?k.call(b,o):q.call(b,"bs-btn-group",o)))),e.buffer.push("\n    <br/>\n    Controller say selected item is: "),n={},m={},e.buffer.push(r(c._triageMustache.call(b,"selected",{hash:{},contexts:[b],types:["ID"],hashContexts:m,hashTypes:n,data:e}))),e.buffer.push('\n</div>\n\n<p><em>content</em> is an array of options, each option is rendered as a <em>button</em> tag.</p>\n<p><strong>TODO: SHOW CODE</strong></p>\n<h2>Button Toolbar</h2>\n<p>Combine sets of bs-btn-groups into a bs-btn-toolbar for more complex components.</p>\n<div class="bs-example">\n    '),o={hash:{},inverse:s.noop,fn:s.program(1,f,e),contexts:[],types:[],hashContexts:m,hashTypes:n,data:e},(l=c["bs-btn-toolbar"])?l=l.call(b,o):(l=b["bs-btn-toolbar"],l=typeof l===t?l.apply(b):l),n={},m={},c["bs-btn-toolbar"]||(l=u.call(b,l,o)),(l||0===l)&&e.buffer.push(l),e.buffer.push('\n</div>\n\n<h2>Sizing</h2>\n<p>You can set size in the group level instead of setting size per button.</p>\n<div class="bs-example">\n    '),o={hash:{},inverse:s.noop,fn:s.program(3,g,e),contexts:[],types:[],hashContexts:m,hashTypes:n,data:e},(l=c["bs-btn-toolbar"])?l=l.call(b,o):(l=b["bs-btn-toolbar"],l=typeof l===t?l.apply(b):l),n={},m={},c["bs-btn-toolbar"]||(l=u.call(b,l,o)),(l||0===l)&&e.buffer.push(l),e.buffer.push("\n    "),o={hash:{},inverse:s.noop,fn:s.program(5,h,e),contexts:[],types:[],hashContexts:m,hashTypes:n,data:e},(l=c["bs-btn-toolbar"])?l=l.call(b,o):(l=b["bs-btn-toolbar"],l=typeof l===t?l.apply(b):l),n={},m={},c["bs-btn-toolbar"]||(l=u.call(b,l,o)),(l||0===l)&&e.buffer.push(l),e.buffer.push("\n    "),o={hash:{},inverse:s.noop,fn:s.program(7,i,e),contexts:[],types:[],hashContexts:m,hashTypes:n,data:e},(l=c["bs-btn-toolbar"])?l=l.call(b,o):(l=b["bs-btn-toolbar"],l=typeof l===t?l.apply(b):l),n={},m={},c["bs-btn-toolbar"]||(l=u.call(b,l,o)),(l||0===l)&&e.buffer.push(l),e.buffer.push("\n    "),o={hash:{},inverse:s.noop,fn:s.program(9,j,e),contexts:[],types:[],hashContexts:m,hashTypes:n,data:e},(l=c["bs-btn-toolbar"])?l=l.call(b,o):(l=b["bs-btn-toolbar"],l=typeof l===t?l.apply(b):l),n={},m={},c["bs-btn-toolbar"]||(l=u.call(b,l,o)),(l||0===l)&&e.buffer.push(l),e.buffer.push('\n</div>\n\n\n<h2>Vertical variation</h2>\n<p>Make a set of buttons appear vertically stacked rather than horizontally by adding <code>vertical=true</code>.</p>\n<div class="bs-example">\n    '),m={contentBinding:b,selectedBinding:b,vertical:b},n={contentBinding:"STRING",selectedBinding:"STRING",vertical:"BOOLEAN"},o={hash:{contentBinding:"options",selectedBinding:"selected",vertical:!0},contexts:[],types:[],hashContexts:m,hashTypes:n,data:e},e.buffer.push(r((k=c["bs-btn-group"]||b["bs-btn-group"],k?k.call(b,o):q.call(b,"bs-btn-group",o)))),e.buffer.push("\n</div>\n\n\n"),p}),this.Ember.TEMPLATES["show_components/label"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h,i,j="",k=c.helperMissing,l=this.escapeExpression;return e.buffer.push('<h1>Label</h1>\n<h2>Basic</h2>\n<div class="bs-example">\n    <h4>Heading with label '),g={content:b},h={content:"STRING"},i={hash:{content:"Label"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-label"]||b["bs-label"],f?f.call(b,i):k.call(b,"bs-label",i)))),e.buffer.push('</h3>\n</div>\n\n<pre><code class="lang-html">    &lt;h3&gt;Heading with label &#123;&#123;bs-label content="Label"&#125;&#125;&lt;/h3&gt;</code></pre>\n<h2>With Type</h2>\n<div class="bs-example">\n    <h3>Heading with <strong>danger</strong> '),g={content:b,type:b},h={content:"STRING",type:"STRING"},i={hash:{content:"Careful!",type:"danger"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-label"]||b["bs-label"],f?f.call(b,i):k.call(b,"bs-label",i)))),e.buffer.push('</h3>\n</div>\n\n<pre><code class="lang-html">    &lt;h3&gt;Heading with &lt;strong&gt;danger&lt;/strong&gt; &#123;&#123;bs-label content="Careful!" type="danger"&#125;&#125;&lt;/h3&gt;</code></pre>\n<h2>Component Properties</h2>\n<p><div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>content</td>\n                <td>string: the label content.</td>\n            </tr>\n            <tr>\n                <td>type</td>\n                <td>Label types: success | info | warning | danger</td>\n            </tr>\n        </tbody>\n    </table></p>\n'),j}),this.Ember.TEMPLATES["show_components/notifications"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h,i,j="",k=c.helperMissing,l=this.escapeExpression;return e.buffer.push('<h1>Notifications</h1>\n<p><em>Notifications</em> is not a Bootstrap component but is mandatory for almost every web application.</p>\n<p><em>Notifications</em> are messages that are rendered as <em>Alerts</em>, they fade in for a short period of time with some message and type and then they fade out.</p>\n<p>Notifications are pushed into an array, so different parts of the application may push notifications to the user\nand each will be displayed one after another.</p>\n<p>To use notifications, put somewhere in your <em>application</em> template the <em>bs-notifications</em> component.</p>\n<pre><code class="lang-html">&#123;&#123;bs-notifications style="z-index: 1000; position: fixed; width: 50%; left: 0; right: 0; margin-left: auto; margin-right: auto; margin-top: 50px;"&#125;&#125;</code></pre>\n<p>How you style the component is up to you, this is just an example for centralizing the notifications on the screen.</p>\n<p>Then use the <em>NotificationManager</em> / <em>NM</em> to push new notifications with a message and type.</p>\n<div class="bs-example" >\n    '),g={type:b,clicked:b,content:b},h={type:"STRING",clicked:"STRING",content:"STRING"},i={hash:{type:"info",clicked:"pushInfo",content:"Push Info"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-button"]||b["bs-button"],f?f.call(b,i):k.call(b,"bs-button",i)))),e.buffer.push("\n    "),g={type:b,clicked:b,content:b},h={type:"STRING",clicked:"STRING",content:"STRING"},i={hash:{type:"warning",clicked:"pushWarn",content:"Push Warning"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-button"]||b["bs-button"],f?f.call(b,i):k.call(b,"bs-button",i)))),e.buffer.push("\n    "),g={type:b,clicked:b,content:b},h={type:"STRING",clicked:"STRING",content:"STRING"},i={hash:{type:"success",clicked:"pushSuccess",content:"Push Success"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-button"]||b["bs-button"],f?f.call(b,i):k.call(b,"bs-button",i)))),e.buffer.push("\n    "),g={type:b,clicked:b,content:b},h={type:"STRING",clicked:"STRING",content:"STRING"},i={hash:{type:"danger",clicked:"pushDanger",content:"Push Danger"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-button"]||b["bs-button"],f?f.call(b,i):k.call(b,"bs-button",i)))),e.buffer.push('\n</div>\n\n<p>Controller code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsNotificationsController = Ember.Controller.extend({\n  pushInfo: function() {\n    return Bootstrap.NM.push(&#39;Hello, this is just an info message.&#39;, &#39;info&#39;);\n  },\n  pushWarn: function() {\n    return Bootstrap.NM.push(&#39;Could not perform operation!&#39;, &#39;warning&#39;);\n  },\n  pushSuccess: function() {\n    return Bootstrap.NM.push(&#39;Successfully performed operation!&#39;, &#39;success&#39;);\n  },\n  pushDanger: function() {\n    return Bootstrap.NM.push(&#39;Danger! system is halting!&#39;, &#39;danger&#39;);\n  }\n});</code></pre>\n<p>During fade out, If user hover with the mouse in the notification area, it will cancel the fade in animation so the user can have more time to read the message, moving the mouse out will retrigger the fade out.</p>\n<p>You can control the duration messages are displayed, the fade out and fade in time by providing properties for each, for more info see the properties options below.</p>\n<h2>Component Properties</h2>\n<p><div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>showTime</td>\n                <td>A number in <em>ms</em> that defines how long the notification is displayed before it starts to fade out.</td>\n            </tr>\n            <tr>\n                <td>fadeInTime</td>\n                <td>A number in <em>ms</em> that defines how long it takes a notification to fades in.</td>\n            </tr>\n            <tr>\n                <td>fadeOutTime</td>\n                <td>A number in <em>ms</em> that defines how long it takes a notification to fade out.</td>\n            </tr>\n        </tbody>\n    </table></p>\n'),j}),this.Ember.TEMPLATES["show_components/page-header"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h,i,j="",k=c.helperMissing,l=this.escapeExpression;return e.buffer.push('<h1>Page Header</h1>\n<p><br/></p>\n<blockquote>\n<p>A simple shell for an h1 to appropriately space out and segment sections of content on a page. It can utilize the h1&#39;s default small element, as well as most other components (with additional styles).\n<small>By Bootstrap</small></p>\n</blockquote>\n<div class="bs-example">\n    '),g={title:b,sub:b},h={title:"STRING",sub:"STRING"},i={hash:{title:"Example page header",sub:"Subtext for header"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-page-header"]||b["bs-page-header"],f?f.call(b,i):k.call(b,"bs-page-header",i)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-page-header title="Example page header" sub="Subtext for header"&#125;&#125;</code></pre>\n'),j}),this.Ember.TEMPLATES["show_components/panel"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){b.buffer.push("\n        <p>Panel content goes here...!</p>\n    ")}function g(a,b){b.buffer.push("\n        <p>Panel content.</p>\n    ")}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var h,i,j,k,l,m="",n=this,o=c.helperMissing;return e.buffer.push('<h1>Panel</h1>\n<blockquote>\n<p>While not always necessary, sometimes you need to put your DOM in a box. For those situations, try the panel component.\n<small>By Bootstrap</small></p>\n</blockquote>\n<h2>Basic</h2>\n<div class="bs-example">\n    '),j={heading:b,footer:b},k={heading:"STRING",footer:"STRING"},l={hash:{heading:"Simple Panel",footer:"Panel Footer"},inverse:n.noop,fn:n.program(1,f,e),contexts:[],types:[],hashContexts:j,hashTypes:k,data:e},h=c["bs-panel"]||b["bs-panel"],i=h?h.call(b,l):o.call(b,"bs-panel",l),(i||0===i)&&e.buffer.push(i),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-panel heading="Simple Panel" footer="Panel Footer"&#125;&#125;\n    &lt;p&gt;Panel content goes here...!&lt;/p&gt;\n&#123;&#123;/bs-panel&#125;&#125;</code></pre>\n<h2>Contextual alternatives</h2>\n<blockquote>\n<p>Like other components, easily make a panel more meaningful to a particular context by adding any of the contextual state classes.\n<small>By Bootstrap</small></p>\n</blockquote>\n<div class="bs-example">\n    '),j={heading:b,type:b},k={heading:"STRING",type:"STRING"},l={hash:{heading:"Primary Panel",type:"primary"},inverse:n.noop,fn:n.program(3,g,e),contexts:[],types:[],hashContexts:j,hashTypes:k,data:e},h=c["bs-panel"]||b["bs-panel"],i=h?h.call(b,l):o.call(b,"bs-panel",l),(i||0===i)&&e.buffer.push(i),e.buffer.push("\n    "),j={heading:b,type:b},k={heading:"STRING",type:"STRING"},l={hash:{heading:"Success Panel",type:"success"},inverse:n.noop,fn:n.program(3,g,e),contexts:[],types:[],hashContexts:j,hashTypes:k,data:e},h=c["bs-panel"]||b["bs-panel"],i=h?h.call(b,l):o.call(b,"bs-panel",l),(i||0===i)&&e.buffer.push(i),e.buffer.push("\n    "),j={heading:b,type:b},k={heading:"STRING",type:"STRING"},l={hash:{heading:"Info Panel",type:"info"},inverse:n.noop,fn:n.program(3,g,e),contexts:[],types:[],hashContexts:j,hashTypes:k,data:e},h=c["bs-panel"]||b["bs-panel"],i=h?h.call(b,l):o.call(b,"bs-panel",l),(i||0===i)&&e.buffer.push(i),e.buffer.push("\n    "),j={heading:b,type:b},k={heading:"STRING",type:"STRING"},l={hash:{heading:"Warning Panel",type:"warning"},inverse:n.noop,fn:n.program(3,g,e),contexts:[],types:[],hashContexts:j,hashTypes:k,data:e},h=c["bs-panel"]||b["bs-panel"],i=h?h.call(b,l):o.call(b,"bs-panel",l),(i||0===i)&&e.buffer.push(i),e.buffer.push("\n    "),j={heading:b,type:b},k={heading:"STRING",type:"STRING"},l={hash:{heading:"Danger Panel",type:"danger"},inverse:n.noop,fn:n.program(3,g,e),contexts:[],types:[],hashContexts:j,hashTypes:k,data:e},h=c["bs-panel"]||b["bs-panel"],i=h?h.call(b,l):o.call(b,"bs-panel",l),(i||0===i)&&e.buffer.push(i),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;#bs-panel heading="Primary Panel" type="primary"&#125;&#125;\n        &lt;p&gt;Panel content.&lt;/p&gt;\n    &#123;&#123;/bs-panel&#125;&#125;\n    &#123;&#123;#bs-panel heading="Success Panel" type="success"&#125;&#125;\n        &lt;p&gt;Panel content.&lt;/p&gt;\n    &#123;&#123;/bs-panel&#125;&#125;\n    &#123;&#123;#bs-panel heading="Info Panel" type="info"&#125;&#125;\n        &lt;p&gt;Panel content.&lt;/p&gt;\n    &#123;&#123;/bs-panel&#125;&#125;\n    &#123;&#123;#bs-panel heading="Warning Panel" type="warning"&#125;&#125;\n        &lt;p&gt;Panel content.&lt;/p&gt;\n    &#123;&#123;/bs-panel}}\n    &#123;&#123;#bs-panel heading="Danger Panel" type="danger"&#125;&#125;\n        &lt;p&gt;Panel content.&lt;/p&gt;\n    &#123;&#123;/bs-panel&#125;&#125;</code></pre>\n<h2>Dismissable Panels</h2>\n<p>This goes beyond what Bootstrap offers and let you create a closable panels by adding the <code>dismiss=true</code> property</p>\n<div class="bs-example">\n    '),j={heading:b,type:b,dismiss:b,onClose:b},k={heading:"STRING",type:"STRING",dismiss:"BOOLEAN",onClose:"STRING"},l={hash:{heading:"Primary Panel",type:"primary",dismiss:!0,onClose:"panelClosed"},inverse:n.noop,fn:n.program(3,g,e),contexts:[],types:[],hashContexts:j,hashTypes:k,data:e},h=c["bs-panel"]||b["bs-panel"],i=h?h.call(b,l):o.call(b,"bs-panel",l),(i||0===i)&&e.buffer.push(i),e.buffer.push('\n</div>\n\n\n<pre><code class="lang-html">&#123;&#123;#bs-panel heading="Primary Panel" type="primary" dismiss=true onClose="panelClosed"&#125;&#125;\n    &lt;p&gt;Panel content.&lt;/p&gt;\n&#123;&#123;/bs-panel&#125;&#125;</code></pre>\n<h2>Clickable Panels</h2>\n<p>Panels can also be clickable, the click is propagated to the <em>current controller</em> via the <em>clicked</em> property</p>\n<div class="bs-example">\n    '),j={heading:b,type:b,clicked:b},k={heading:"STRING",type:"STRING",clicked:"STRING"},l={hash:{heading:"Primary Panel",type:"primary",clicked:"panelClicked"},inverse:n.noop,fn:n.program(3,g,e),contexts:[],types:[],hashContexts:j,hashTypes:k,data:e},h=c["bs-panel"]||b["bs-panel"],i=h?h.call(b,l):o.call(b,"bs-panel",l),(i||0===i)&&e.buffer.push(i),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-panel heading="Primary Panel" type="primary" clicked="panelClicked"&#125;&#125;\n    &lt;p&gt;Panel content.&lt;/p&gt;\n&#123;&#123;/bs-panel&#125;&#125;</code></pre>\n'),m}),this.Ember.TEMPLATES["show_components/pills"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h,i,j="",k=c.helperMissing,l=this.escapeExpression;return e.buffer.push('<h1>Pills</h1>\n<p><a href="http://getbootstrap.com/components/#nav-pills">Pills</a> are a button-like navigation style,</p>\n<p>Bootstrap doesn&#39;t dictate nor assist with how you respond when an item is selected in the Pills navigation,\nBut using <em>bs-pills</em> helps by making the navigation more interactive by providing selection bindings and styling the\nactive element, see examples below.</p>\n<div class="bs-example">\n    '),g={contentBinding:b,selectedBinding:b},h={contentBinding:"STRING",selectedBinding:"STRING"},i={hash:{contentBinding:"content",selectedBinding:"selected"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-pills"]||b["bs-pills"],f?f.call(b,i):k.call(b,"bs-pills",i)))),e.buffer.push("\n    Selected: "),h={},g={},e.buffer.push(l(c._triageMustache.call(b,"selected",{hash:{},contexts:[b],types:["ID"],hashContexts:g,hashTypes:h,data:e}))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">\n&#123;&#123;bs-pills contentBinding="content" selectedBinding="selected"&#125;&#125;\n\nSelected: &#123;&#123;selected&#125;&#125;</code></pre>\n<p><em>content</em> and <em>selected</em> are properties in the current <em>controller</em></p>\n<ul>\n<li>The <em>content</em> controller property is an array of strings where each string is rendered as a possible item selection.</li>\n<li>When an item selection is changed, the <em>selected</em> property in the current <em>controller</em> will be set with the value of the selected item.</li>\n</ul>\n<p>Here&#39;s the controller sample code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsPillsController = Ember.Controller.extend({\n  content: [&#39;Home&#39;, &#39;Profile&#39;, &#39;Messages&#39;],\n  contentChanged: (function() {\n    return console.log("Selection has changed to: " + (this.get(&#39;selected&#39;)));\n  }).observes(&#39;selected&#39;)\n});</code></pre>\n<h1>Stacked</h1>\n<blockquote>\n<p>Pills are also vertically stackable. Just add `stacked=true``</p>\n</blockquote>\n<div class="bs-example">\n    '),g={contentBinding:b,selectedBinding:b,stacked:b,style:b},h={contentBinding:"STRING",selectedBinding:"STRING",stacked:"BOOLEAN",style:"STRING"},i={hash:{contentBinding:"content",selectedBinding:"selected",stacked:!0,style:"max-width: 300px;"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-pills"]||b["bs-pills"],f?f.call(b,i):k.call(b,"bs-pills",i)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-pills contentBinding="content" selectedBinding="selected" stacked=true style="max-width: 300px;"&#125;&#125;</code></pre>\n<h1>Justified</h1>\n<blockquote>\n<p>Easily make tabs or pills equal widths of their parent with setting <code>justified=true</code></p>\n</blockquote>\n<div class="bs-example">\n    '),g={contentBinding:b,selectedBinding:b,justified:b},h={contentBinding:"STRING",selectedBinding:"STRING",justified:"BOOLEAN"},i={hash:{contentBinding:"content",selectedBinding:"selected",justified:!0},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-pills"]||b["bs-pills"],f?f.call(b,i):k.call(b,"bs-pills",i)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-pills contentBinding="content" selectedBinding="selected" justified=true&#125;&#125;</code></pre>\n<h1>Disabled links</h1>\n<p>Bootstrap doesn&#39;t stop the propagation of the redirection of disabled links for you:</p>\n<blockquote>\n<p> This class will only change the <em>anchor</em>&#39;s appearance, not its functionality. Use custom JavaScript to disable links here.\n<small><a href="http://getbootstrap.com/components/#nav-disabled-links">By Bootstrap</a></small></p>\n</blockquote>\n<p>But using <em>bs-pills</em> ease your pain by giving you the opportunity to bind the disable state of each item by providing extra metadata per item, clicking a disabled item disables the links too.</p>\n<p>To define links (items) as disabed, you need to provide extra metadata per defined item in the <em>contentBinding</em> property.</p>\n<div class="bs-example">\n    '),g={contentBinding:b,selectedBinding:b},h={contentBinding:"STRING",selectedBinding:"STRING"},i={hash:{contentBinding:"content1",selectedBinding:"selected1"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-pills"]||b["bs-pills"],f?f.call(b,i):k.call(b,"bs-pills",i)))),e.buffer.push("\n    "),g={clicked:b,content:b},h={clicked:"STRING",content:"STRING"},i={hash:{clicked:"disableHome",content:"Disable Home"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-button"]||b["bs-button"],f?f.call(b,i):k.call(b,"bs-button",i)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;bs-pills contentBinding="content" selectedBinding="selected"&#125;&#125;\n&#123;&#123;bs-button clicked="disableHome" content="Disable Home"&#125;&#125;</code></pre>\n<p>Controller sample code:</p>\n<pre><code class="lang-javascript">\nShowcase.ShowComponentsPillsController = Ember.Controller.extend({\n  init: function() {\n    this._super();\n    this.set(&#39;content&#39;, Ember.A([\n      Ember.Object.create({title: &#39;Home&#39;,disabled: false}),\n      Ember.Object.create({title: &#39;Admin&#39;,disabled: true})\n    ]));\n    this.set(&#39;selected&#39;, this.get(&#39;content&#39;).objectAt(0));\n  },\n\n  disableHome: function() {\n    this.get(&#39;content&#39;).objectAt(0).set(&#39;disabled&#39;, true);\n  }\n});</code></pre>\n'),j}),this.Ember.TEMPLATES["show_components/progressbar"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d,e,f,g,h="";return b.buffer.push("\n        "),e={type:a,progress:a},f={type:"STRING",progress:"STRING"},g={hash:{type:"success",progress:"35"},contexts:[],types:[],hashContexts:e,hashTypes:f,data:b},b.buffer.push(n((d=c["bs-progressbar"]||a["bs-progressbar"],d?d.call(a,g):m.call(a,"bs-progressbar",g)))),b.buffer.push("\n        "),e={type:a,progress:a},f={type:"STRING",progress:"STRING"},g={hash:{type:"warning",progress:"20"},contexts:[],types:[],hashContexts:e,hashTypes:f,data:b},b.buffer.push(n((d=c["bs-progressbar"]||a["bs-progressbar"],d?d.call(a,g):m.call(a,"bs-progressbar",g)))),b.buffer.push("\n        "),e={type:a,progress:a},f={type:"STRING",progress:"STRING"},g={hash:{type:"danger",progress:"10"},contexts:[],types:[],hashContexts:e,hashTypes:f,data:b},b.buffer.push(n((d=c["bs-progressbar"]||a["bs-progressbar"],d?d.call(a,g):m.call(a,"bs-progressbar",g)))),b.buffer.push("\n    "),h}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var g,h,i,j,k,l="",m=c.helperMissing,n=this.escapeExpression,o=this,p="function",q=c.blockHelperMissing;return e.buffer.push('<h1>Progress Bar</h1>\n<blockquote>\n<p>Provide up-to-date feedback on the progress of a workflow or action with simple yet flexible progress bars.\n<small>By Bootstrap</small></p>\n</blockquote>\n<h2>Basic usage</h2>\n<div class="bs-example">\n    '),i={progress:b},j={progress:"INTEGER"},k={hash:{progress:60},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-progress"]||b["bs-progress"],g?g.call(b,k):m.call(b,"bs-progress",k)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-progress progress=60&#125;&#125;</code></pre>\n<p><strong>Simple as that! a single short line, compared to <a href="http://getbootstrap.com/components/#progress">Bootstarp Tags</a> 5 long lines that\nproduces the same result.</strong></p>\n<p>The progress component respects all <em>aria</em> tags mentioned in <em>Bootstrap</em> documentation.</p>\n<hr>\n<blockquote>\n<p>Progress bars use some of the same button and alert classes for consistent styles\n<small>By Bootstrap</small></p>\n</blockquote>\n<div class="bs-example">\n    '),i={progress:b,type:b},j={progress:"INTEGER",type:"STRING"},k={hash:{progress:40,type:"success"},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-progress"]||b["bs-progress"],g?g.call(b,k):m.call(b,"bs-progress",k)))),e.buffer.push("\n    "),i={progress:b,type:b},j={progress:"INTEGER",type:"STRING"},k={hash:{progress:20,type:"info"},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-progress"]||b["bs-progress"],g?g.call(b,k):m.call(b,"bs-progress",k)))),e.buffer.push("\n    "),i={progress:b,type:b},j={progress:"INTEGER",type:"STRING"},k={hash:{progress:60,type:"warning"},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-progress"]||b["bs-progress"],g?g.call(b,k):m.call(b,"bs-progress",k)))),e.buffer.push("\n    "),i={progress:b,type:b},j={progress:"INTEGER",type:"STRING"},k={hash:{progress:80,type:"danger"},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-progress"]||b["bs-progress"],g?g.call(b,k):m.call(b,"bs-progress",k)))),e.buffer.push('\n</div>\n\n\n<pre><code class="lang-html">    &#123;&#123;bs-progress progress=40 type="success"&#125;&#125;\n    &#123;&#123;bs-progress progress=20 type="info"&#125;&#125;\n    &#123;&#123;bs-progress progress=60 type="warning"&#125;&#125;\n    &#123;&#123;bs-progress progress=80 type="danger"&#125;&#125;</code></pre>\n<hr>\n<p>The <em>progress</em> property can be bound to a controller property:</p>\n<div class="bs-example">\n    '),i={progressBinding:b},j={progressBinding:"STRING"},k={hash:{progressBinding:"prog"},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-progress"]||b["bs-progress"],g?g.call(b,k):m.call(b,"bs-progress",k)))),e.buffer.push("\n    "),i={clicked:b,content:b},j={clicked:"STRING",content:"STRING"},k={hash:{clicked:"increment",content:"Increment!"},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-button"]||b["bs-button"],g?g.call(b,k):m.call(b,"bs-button",k)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-progress progressBinding="prog"&#125;&#125;\n    &#123;&#123;bs-button clicked="increment" content="Increment!"&#125;&#125;</code></pre>\n<p>Controller sample code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsProgressbarController = Ember.Controller.extend({\n  prog: 0,\n  incrementBy: 20,\n  increment: function() {\n    if (this.prog &lt; 100) {\n      return this.incrementProperty("prog", this.incrementBy);\n    } else {\n      return this.set("prog", this.incrementBy);\n    }\n  }\n});</code></pre>\n<h2>Striped</h2>\n<blockquote>\n<p>Uses a gradient to create a striped effect. Not available in IE8.\n<small>By Bootstrap</small></p>\n</blockquote>\n<p>This is simply done by setting the <em>stripped=true</em> property.</p>\n<div class="bs-example">\n    '),i={progress:b,type:b,stripped:b},j={progress:"INTEGER",type:"STRING",stripped:"BOOLEAN"},k={hash:{progress:40,type:"success",stripped:!0},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-progress"]||b["bs-progress"],g?g.call(b,k):m.call(b,"bs-progress",k)))),e.buffer.push("\n    "),i={progress:b,type:b,stripped:b},j={progress:"INTEGER",type:"STRING",stripped:"BOOLEAN"},k={hash:{progress:20,type:"info",stripped:!0},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-progress"]||b["bs-progress"],g?g.call(b,k):m.call(b,"bs-progress",k)))),e.buffer.push("\n    "),i={progress:b,type:b,stripped:b},j={progress:"INTEGER",type:"STRING",stripped:"BOOLEAN"},k={hash:{progress:60,type:"warning",stripped:!0},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-progress"]||b["bs-progress"],g?g.call(b,k):m.call(b,"bs-progress",k)))),e.buffer.push("\n    "),i={progress:b,type:b,stripped:b},j={progress:"INTEGER",type:"STRING",stripped:"BOOLEAN"},k={hash:{progress:80,type:"danger",stripped:!0},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-progress"]||b["bs-progress"],g?g.call(b,k):m.call(b,"bs-progress",k)))),e.buffer.push('\n</div>\n\n\n<h2>Animated</h2>\n<p>In addition to <em>stripped=true</em>, add <em>animated=true</em> property to animate the stripes right to left.</p>\n<div class="bs-example">\n    '),i={progress:b,stripped:b,animated:b},j={progress:"INTEGER",stripped:"BOOLEAN",animated:"BOOLEAN"},k={hash:{progress:45,stripped:!0,animated:!0},contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},e.buffer.push(n((g=c["bs-progress"]||b["bs-progress"],g?g.call(b,k):m.call(b,"bs-progress",k)))),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;bs-progress progress=45 stripped=true animated=true&#125;&#125;</code></pre>\n<h2>Stacked</h2>\n<p>Multiple bars can be placed into the same <em>bs-progress</em> to stack them:</p>\n<div class="bs-example">\n    '),k={hash:{},inverse:o.noop,fn:o.program(1,f,e),contexts:[],types:[],hashContexts:i,hashTypes:j,data:e},(h=c["bs-progress"])?h=h.call(b,k):(h=b["bs-progress"],h=typeof h===p?h.apply(b):h),j={},i={},c["bs-progress"]||(h=q.call(b,h,k)),(h||0===h)&&e.buffer.push(h),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">    &#123;&#123;#bs-progress&#125;&#125;\n        &#123;&#123;bs-progressbar type="success" progress="35"&#125;&#125;\n        &#123;&#123;bs-progressbar type="warning" progress="20"&#125;&#125;\n        &#123;&#123;bs-progressbar type="danger" progress="10"&#125;&#125;\n    &#123;&#123;/bs-progress&#125;&#125;</code></pre>\n'),l}),this.Ember.TEMPLATES["show_components/tabs"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h,i,j="",k=c.helperMissing,l=this.escapeExpression;return e.buffer.push('<h1>Tabs</h1>\n<p>Tabs are like Pills but styled differently,\nThe share exactly the same concepts, so this page doesn&#39;t repeat everything, visit Pills for the complete details.</p>\n<div class="bs-example">\n    '),g={contentBinding:b,selectedBinding:b},h={contentBinding:"STRING",selectedBinding:"STRING"},i={hash:{contentBinding:"content",selectedBinding:"selected"},contexts:[],types:[],hashContexts:g,hashTypes:h,data:e},e.buffer.push(l((f=c["bs-tabs"]||b["bs-tabs"],f?f.call(b,i):k.call(b,"bs-tabs",i)))),e.buffer.push("\n\n    <br/>\n    <strong>Selected</strong>: "),h={},g={},e.buffer.push(l(c._triageMustache.call(b,"selected",{hash:{},contexts:[b],types:["ID"],hashContexts:g,hashTypes:h,data:e}))),e.buffer.push('\n</div>\n\n\n<pre><code class="lang-html">    &#123;&#123;bs-tabs contentBinding="content" selectedBinding="selected"&#125;&#125;</code></pre>\n<p>Controller&#39;s code:</p>\n<pre><code class="lang-javascript">Showcase.ShowComponentsTabsController = Ember.Controller.extend({\n  content: [&#39;Home&#39;, &#39;Profile&#39;, &#39;Messages&#39;]\n});</code></pre>\n'),j}),this.Ember.TEMPLATES["show_components/well"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){b.buffer.push("\n    I am in a well, click me!\n    ")}function g(a,b){b.buffer.push("\n    Look, I&#39;m in a large well!\n    ")
}function h(a,b){b.buffer.push("\n    Look, I&#39;m in a small well!\n    ")}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var i,j,k,l,m,n="",o=this,p=c.helperMissing;return e.buffer.push('<h1>Well</h1>\n<h2>Default Well</h2>\n<p>Here is a default well, but <strong>pay attention</strong> that it is clickable, the click will be propagated to the <strong>controller</strong>.</p>\n\n<div class="bs-example">\n    '),k={clicked:b},l={clicked:"STRING"},m={hash:{clicked:"wellClick"},inverse:o.noop,fn:o.program(1,f,e),contexts:[],types:[],hashContexts:k,hashTypes:l,data:e},i=c["bs-well"]||b["bs-well"],j=i?i.call(b,m):p.call(b,"bs-well",m),(j||0===j)&&e.buffer.push(j),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-well clicked="wellClick"&#125;&#125;\nI am in a well!\n&#123;&#123;/bs-well&#125;&#125;</code></pre>\n<p><code>wellClick</code> is the function name in the <strong>controller</strong>.</p>\n<h2>Optional classes</h2>\n<p>As explained by Bootstrap:</p>\n<blockquote>\n<p>Control padding and rounded corners with two optional modifier classes.</p>\n</blockquote>\n<h3>Large Well</h3>\n<div class="bs-example">\n    '),k={large:b},l={large:"BOOLEAN"},m={hash:{large:!0},inverse:o.noop,fn:o.program(3,g,e),contexts:[],types:[],hashContexts:k,hashTypes:l,data:e},i=c["bs-well"]||b["bs-well"],j=i?i.call(b,m):p.call(b,"bs-well",m),(j||0===j)&&e.buffer.push(j),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-well large=true&#125;&#125;\nLook, I&#39;m in a large well!\n&#123;&#123;/bs-well&#125;&#125;</code></pre>\n<p><b>You can set large well by adding <code>class="well-lg"</code> or just set the <code>large</code> property to true</b></p>\n<h3>Small Well</h3>\n<div class="bs-example">\n    '),k={small:b},l={small:"BOOLEAN"},m={hash:{small:!0},inverse:o.noop,fn:o.program(5,h,e),contexts:[],types:[],hashContexts:k,hashTypes:l,data:e},i=c["bs-well"]||b["bs-well"],j=i?i.call(b,m):p.call(b,"bs-well",m),(j||0===j)&&e.buffer.push(j),e.buffer.push('\n</div>\n\n<pre><code class="lang-html">&#123;&#123;#bs-well small=true&#125;&#125;\nLook, I&#39;m in a small well!\n&#123;&#123;/bs-well&#125;&#125;</code></pre>\n<p><b>You can set large well by adding <code>class="well-sm"</code> or just set the <code>small</code> property to true</b></p>\n<h2>Component Properties</h2>\n<p><div class="table-responsive">\n    <table class="table table-bordered table-striped">\n        <thead>\n            <tr>\n                <th style="width: 150px;">Property</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>large</td>\n                <td>If true, a large well <em>will</em> be rendered by adding the <strong>well-lg</strong> class.</td>\n            </tr>\n            <tr>\n                <td>small</td>\n                <td>If true, a small <em>well</em> will be rendered by adding the <strong>well-sm</strong> class.</td>\n            </tr>\n            <tr>\n                <td>clicked</td>\n                <td>Triggers the specified function name on the <strong>controller</strong> immediately when user clicks the area of the well.</td>\n            </tr>\n        </tbody>\n    </table></p>\n'),n}),this.Ember.TEMPLATES["social-buttons"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{},e.buffer.push('<div class="bs-social">\n  <ul class="bs-social-buttons">\n    <li>\n      <iframe class="github-btn" src="http://ghbtns.com/github-btn.html?user=ember-addons&amp;repo=bootstrap-for-ember&amp;type=watch&amp;count=true" width="100" height="20" title="Star on GitHub"></iframe>\n    </li>\n    <li>\n      <iframe class="github-btn" src="http://ghbtns.com/github-btn.html?user=ember-addons&amp;repo=bootstrap-for-ember&amp;type=fork&amp;count=true" width="102" height="20" title="Fork on GitHub"></iframe>\n    </li>\n    <li class="follow-btn">\n      <a href="https://twitter.com/bs_for_ember" class="twitter-follow-button" data-link-color="#0069D6" data-show-count="true">Follow @bs_for_ember</a>\n    </li>\n  </ul>\n</div>\n')}),function(){!function(){var a,b;a=window.Bootstrap,b=window.Showcase=Ember.Application.createWithMixins(a.Register,{LOG_TRANSITIONS:!0,LOG_VIEW_LOOKUPS:!0,LOG_ACTIVE_GENERATION:!0}),Ember.Handlebars.registerHelper("raw",function(a){return a.fn(a)})}(),function(){!function(){Showcase.Router.map(function(){return this.resource("show_components",function(){return this.route("alert"),this.route("label"),this.route("badge"),this.route("well"),this.route("panel"),this.route("page-header"),this.route("button"),this.route("buttonGroup"),this.route("progressbar"),this.route("pills"),this.route("tabs"),this.route("notifications")})})}.call(this)}(),function(){!function(){Showcase.ApplicationRoute=Ember.Route.extend({model:function(){return[Ember.Object.create({title:"Alert",route:"show_components.alert"}),Ember.Object.create({title:"Label",route:"show_components.label"}),Ember.Object.create({title:"Badge",route:"show_components.badge"}),Ember.Object.create({title:"Well",route:"show_components.well"}),Ember.Object.create({title:"Panel",route:"show_components.panel"}),Ember.Object.create({title:"Page Header",route:"show_components.page-header"}),Ember.Object.create({title:"Button",route:"show_components.button"}),Ember.Object.create({title:"Button Group",route:"show_components.buttonGroup"}),Ember.Object.create({title:"Progressbar",route:"show_components.progressbar"}),Ember.Object.create({title:"Nav - Pills",route:"show_components.pills"}),Ember.Object.create({title:"Nav - Tabs",route:"show_components.tabs"}),Ember.Object.create({title:"Notifications",special:!0,route:"show_components.notifications"})]}})}.call(this)}(),function(){!function(){Showcase.ApplicationController=Ember.ArrayController.extend({select:function(a){return this.transitionToRoute(a.route)}})}.call(this)}(),function(){!function(){Showcase.ShowComponentsAlertController=Ember.Controller.extend({didAlertClosed:function(){return alert("From controller: The -closed- event was triggered.")},didAlertClose:function(){return alert("From controller: The -close- event was triggered.")},submit:function(){return alert("Action taken by controller!")}})}.call(this)}(),function(){!function(){Showcase.ShowComponentsButtonController=Ember.Controller.extend({isButtonDisabled:!1,loadingState:null,loadingState1:null,disableButton:function(){return this.set("isButtonDisabled",!0)},startLoading:function(){var a=this;return this.set("loadingState","loading"),Ember.run.later(function(){return a.set("loadingState",null)},2e3)},startLoading1:function(){var a=this;return this.set("loadingState1","loading"),Ember.run.later(function(){return a.set("loadingState1","completed")},2e3)}})}.call(this)}(),function(){!function(){Showcase.ShowComponentsPanelController=Ember.Controller.extend({panelClicked:function(){return alert("Hello from controller: A click in a panel!")},panelClosed:function(){return alert("Hello from controller: The panel was closed!")}})}.call(this)}(),function(){!function(){Showcase.ShowComponentsProgressbarController=Ember.Controller.extend({prog:0,incrementBy:20,increment:function(){return this.prog<100?this.incrementProperty("prog",this.incrementBy):this.set("prog",this.incrementBy)}})}.call(this)}(),function(){!function(){Showcase.ShowComponentsWellController=Ember.Controller.extend({wellClick:function(){return alert("Hello from controller: A click in a well!")}})}.call(this)}(),function(){!function(){Showcase.ShowComponentsButtonGroupController=Ember.Controller.extend({options:["Home","Profile","Messages"],options2:["Admin","Settings"]})}.call(this)}(),function(){!function(){Showcase.ShowComponentsPillsController=Ember.Controller.extend({content:["Home","Profile","Messages"],init:function(){return this._super(),this.set("content1",Ember.A([Ember.Object.create({title:"Home",disabled:!1}),Ember.Object.create({title:"Admin",disabled:!0})])),this.set("selected1",this.get("content1").objectAt(0))},contentChanged:function(){return console.log("Selection has changed to: "+this.get("selected"))}.observes("selected"),disableHome:function(){return this.get("content1").objectAt(0).set("disabled",!0)}})}.call(this)}(),function(){!function(){Showcase.ShowComponentsNotificationsController=Ember.Controller.extend({pushInfo:function(){return Bootstrap.NM.push("Hello, this is just an info message.","info")},pushWarn:function(){return Bootstrap.NM.push("Could not perform operation!","warning")},pushSuccess:function(){return Bootstrap.NM.push("Successfully performed operation!","success")},pushDanger:function(){return Bootstrap.NM.push("Danger! system is halting!","danger")}})}.call(this)}(),function(){!function(){Showcase.ShowComponentsTabsController=Ember.Controller.extend({content:["Home","Profile","Messages"],init:function(){return this._super(),this.set("selected","Home")}})}.call(this)}(),function(){}.call(this)}();